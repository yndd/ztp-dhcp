// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/devices/device.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dhcpv4 "github.com/insomniacslk/dhcp/dhcpv4"
	backend "github.com/yndd/ztp-dhcp/pkg/backend"
	structs "github.com/yndd/ztp-dhcp/pkg/structs"
)

// MockDevice is a mock of Device interface.
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice.
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance.
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// AdjustReply mocks base method.
func (m *MockDevice) AdjustReply(req, resp *dhcpv4.DHCPv4, devinfo *structs.DeviceInformation) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AdjustReply", req, resp, devinfo)
}

// AdjustReply indicates an expected call of AdjustReply.
func (mr *MockDeviceMockRecorder) AdjustReply(req, resp, devinfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdjustReply", reflect.TypeOf((*MockDevice)(nil).AdjustReply), req, resp, devinfo)
}

// SetBackend mocks base method.
func (m *MockDevice) SetBackend(backend backend.ZtpBackend) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBackend", backend)
}

// SetBackend indicates an expected call of SetBackend.
func (mr *MockDeviceMockRecorder) SetBackend(backend interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBackend", reflect.TypeOf((*MockDevice)(nil).SetBackend), backend)
}
