// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/devices/devicemanagerhandler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	backend "github.com/yndd/ztp-dhcp/pkg/backend"
	devices "github.com/yndd/ztp-dhcp/pkg/devices"
)

// MockDeviceManagerHandler is a mock of DeviceManagerHandler interface.
type MockDeviceManagerHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceManagerHandlerMockRecorder
}

// MockDeviceManagerHandlerMockRecorder is the mock recorder for MockDeviceManagerHandler.
type MockDeviceManagerHandlerMockRecorder struct {
	mock *MockDeviceManagerHandler
}

// NewMockDeviceManagerHandler creates a new mock instance.
func NewMockDeviceManagerHandler(ctrl *gomock.Controller) *MockDeviceManagerHandler {
	mock := &MockDeviceManagerHandler{ctrl: ctrl}
	mock.recorder = &MockDeviceManagerHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceManagerHandler) EXPECT() *MockDeviceManagerHandlerMockRecorder {
	return m.recorder
}

// GetModelHandler mocks base method.
func (m *MockDeviceManagerHandler) GetModelHandler(model string) (devices.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelHandler", model)
	ret0, _ := ret[0].(devices.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelHandler indicates an expected call of GetModelHandler.
func (mr *MockDeviceManagerHandlerMockRecorder) GetModelHandler(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelHandler", reflect.TypeOf((*MockDeviceManagerHandler)(nil).GetModelHandler), model)
}

// SetBackend mocks base method.
func (m *MockDeviceManagerHandler) SetBackend(arg0 backend.ZtpBackend) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBackend", arg0)
}

// SetBackend indicates an expected call of SetBackend.
func (mr *MockDeviceManagerHandlerMockRecorder) SetBackend(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBackend", reflect.TypeOf((*MockDeviceManagerHandler)(nil).SetBackend), arg0)
}
