// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/backend/backend.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	structs "github.com/yndd/ztp-dhcp/pkg/structs"
)

// MockZtpBackend is a mock of ZtpBackend interface.
type MockZtpBackend struct {
	ctrl     *gomock.Controller
	recorder *MockZtpBackendMockRecorder
}

// MockZtpBackendMockRecorder is the mock recorder for MockZtpBackend.
type MockZtpBackendMockRecorder struct {
	mock *MockZtpBackend
}

// NewMockZtpBackend creates a new mock instance.
func NewMockZtpBackend(ctrl *gomock.Controller) *MockZtpBackend {
	mock := &MockZtpBackend{ctrl: ctrl}
	mock.recorder = &MockZtpBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZtpBackend) EXPECT() *MockZtpBackendMockRecorder {
	return m.recorder
}

// GetDeviceInformationByClientIdentifier mocks base method.
func (m *MockZtpBackend) GetDeviceInformationByClientIdentifier(cir *structs.ClientIdentifier) (*structs.DeviceInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceInformationByClientIdentifier", cir)
	ret0, _ := ret[0].(*structs.DeviceInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceInformationByClientIdentifier indicates an expected call of GetDeviceInformationByClientIdentifier.
func (mr *MockZtpBackendMockRecorder) GetDeviceInformationByClientIdentifier(cir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceInformationByClientIdentifier", reflect.TypeOf((*MockZtpBackend)(nil).GetDeviceInformationByClientIdentifier), cir)
}

// GetDeviceInformationByName mocks base method.
func (m *MockZtpBackend) GetDeviceInformationByName(deviceId string) (*structs.DeviceInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceInformationByName", deviceId)
	ret0, _ := ret[0].(*structs.DeviceInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceInformationByName indicates an expected call of GetDeviceInformationByName.
func (mr *MockZtpBackendMockRecorder) GetDeviceInformationByName(deviceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceInformationByName", reflect.TypeOf((*MockZtpBackend)(nil).GetDeviceInformationByName), deviceId)
}

// GetWebserverInformation mocks base method.
func (m *MockZtpBackend) GetWebserverInformation() (*structs.WebserverInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebserverInformation")
	ret0, _ := ret[0].(*structs.WebserverInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebserverInformation indicates an expected call of GetWebserverInformation.
func (mr *MockZtpBackendMockRecorder) GetWebserverInformation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebserverInformation", reflect.TypeOf((*MockZtpBackend)(nil).GetWebserverInformation))
}
