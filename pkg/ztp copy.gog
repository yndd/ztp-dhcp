package ztp

import (
	"fmt"
	"log"
	"net"

	"github.com/insomniacslk/dhcp/dhcpv4"
	"github.com/insomniacslk/dhcp/dhcpv4/server4"
)

func handler(conn net.PacketConn, peer net.Addr, m *dhcpv4.DHCPv4) {
	// this function will just print the received DHCPv4 message, without replying
	log.Print(m.Summary())

	switch m.MessageType() {
	case dhcpv4.MessageTypeDiscover:
		handleDiscover(conn, peer, m)
	case dhcpv4.MessageTypeRequest:
		handleRequest(conn, peer, m)
	default:
		printDHCPPacket(conn, peer, m)
	}
}

var (
	clientip      net.IP
	clientnetmask *net.IPNet
	err           error
	LEASETIME     uint32 = 3600
)

func init() {
	clientip, clientnetmask, err = net.ParseCIDR("192.168.50.200/24")
	if err != nil {
		log.Fatalf("Error: %v", err)
	}
}

func printDHCPPacket(conn net.PacketConn, peer net.Addr, m *dhcpv4.DHCPv4) {
	println("NO HANDLER FOR THE FOLLOWING PACKET:")
	println(m.Summary())
}

func handleDiscover(conn net.PacketConn, peer net.Addr, m *dhcpv4.DHCPv4) {
	log.Print("DiscoverHandler - Start")
	reply, err := dhcpv4.NewReplyFromRequest(m)
	if err != nil {
		log.Printf("failed to build reply: %v", err)
		return
	}

	reply.UpdateOption(dhcpv4.OptMessageType(dhcpv4.MessageTypeOffer))

	dhcpv4.WithLeaseTime(LEASETIME)(reply)

	if _, err := conn.WriteTo(reply.ToBytes(), peer); err != nil {
		log.Printf("Cannot reply to client: %v", err)
	}
	println("REPLY:")
	println(reply.Summary())

	log.Print("DiscoverHandler - Done")
}

func handleRequest(conn net.PacketConn, peer net.Addr, m *dhcpv4.DHCPv4) {
	log.Print("RequestHandler - Start")

	reply, err := dhcpv4.NewReplyFromRequest(m)
	if err != nil {
		log.Printf("failed to build reply: %v", err)
		return
	}
	reply.UpdateOption(dhcpv4.OptMessageType(dhcpv4.MessageTypeAck))
	dhcpv4.WithLeaseTime(LEASETIME)(reply)
	dhcpv4.WithYourIP(clientip)(reply)
	dhcpv4.WithClientIP(clientip)(reply)
	dhcpv4.WithNetmask(clientnetmask.Mask)(reply)
	dhcpv4.WithRouter(net.ParseIP("192.168.50.1"))(reply)

	if _, err := conn.WriteTo(reply.ToBytes(), peer); err != nil {
		log.Printf("Cannot reply to client: %v", err)
	}

	reply.Options.Update(dhcpv4.OptTFTPServerName("http://192.168.5.1"))
	reply.Options.Update(dhcpv4.OptBootFileName("foo/bar/file"))

	println("REPLY:")
	println(reply.Summary())

	log.Print("RequestHandler - Done")
}

func Serve(serverport int) {
	laddr := &net.UDPAddr{
		IP:   net.ParseIP("0.0.0.0"),
		Port: serverport,
	}
	server, err := server4.NewServer("testbr", laddr, handler, server4.WithDebugLogger())
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("Start serving!")
	server.Serve()
}
